#!/bin/bash
##############################################################################
# update-forks
# -----------
# This script assumes you have paths in your $HOME that are
# git repos (which are forks). It will check this based off
# if you have set the remote origin as no_push.
#
# It will then fetch the remotes, and update the master
# branch of your fork.
#
# :authors: Jess Frazelle, @jfrazelle
# :date: 8 June 2015
# :version: 0.0.1
##############################################################################
set -e
set -o pipefail

update_forks() {
	local githubuser=$(git config --global --get github.user 2>/dev/null)

	# find all the dirs in $HOME
	find -L "$HOME" -maxdepth 1 -type d -not -path '*/\.*' -not -path "$HOME" -print0 | while read -d '' -r dir; do
		# subshell because we cd
		(
		cd "$dir"

		# check the git remote
		local remotepush=$(git config --get remote.origin.pushurl 2>/dev/null)
		local repo=$(basename "$dir")
		if [[ "$remotepush" == "no_push" ]]; then
			echo "$repo is a git directory with origin no_push"
			# check if there is a git remote names after the github username
			if git remote | grep "$githubuser" > /dev/null ; then
				# fetch the remotes
				# and prune
				git remote -v update -p

				# check if the user is on the master branch
				# and update if so
				# this way we prevent the script from running while
				# editing files in a different branch
				local currentbranch=$(git rev-parse --abbrev-ref HEAD)
				if [[ "$currentbranch" == "master" ]]; then
					# rebase (better than pull)
					git rebase origin/master

					# push to your fork's master branch
					git push "$githubuser" master
					echo "Updated local $githubuser/$repo to origin/master"
				fi
			fi
		fi
		)
	done
}

update_forks "$@"
