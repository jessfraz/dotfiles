#!/bin/bash
set -e

help() {
	echo "htotheizzo - a simple script that makes updating/upgrading homebrew or apt, gems, pip packages, and node packages so much easier"
}

# Choose a user account to use
get_user() {
	if [ -z "${TARGET_USER-}" ]; then
		mapfile -t options < <(find /home/* -maxdepth 0 -printf "%f\\n" -type d)
		# if there is only one option just use that user
		if [ "${#options[@]}" -eq "1" ]; then
			readonly TARGET_USER="${options[0]}"
			echo "Using user account: ${TARGET_USER}"
			return
		fi

		# iterate through the user options and print them
		PS3='Which user account should be used? '

		select opt in "${options[@]}"; do
			readonly TARGET_USER=$opt
			break
		done
	fi
}

dcleanup(){
	local containers
	mapfile -t containers < <(docker ps --filter status=exited -q 2>/dev/null)
	docker rm "${containers[@]}" 2>/dev/null
	local images
	mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
	docker rmi "${images[@]}" 2>/dev/null
}

update_docker() {
	local user_home="/home/${TARGET_USER}"
	local docker_dir="${user_home}/.go/src/github.com/docker/docker"

	# set init
	local init="systemd"
	if [[ "$(/sbin/init --version)" =~ "upstart" ]]; then
		init="upstart"
	fi

	# stop docker
	dcleanup || true
	if [[ "$init" == "upstart" ]]; then
		service docker stop || true
	else
		systemctl stop docker || true
	fi

	if [[ -d "${docker_dir}" ]]; then
		(
		cd "${docker_dir}"

		# Clean up bundles
		rm -rf bundles

		# Include contributed completions
		mkdir -p /etc/bash_completion.d
		curl -sSL -o /etc/bash_completion.d/docker https://raw.githubusercontent.com/docker/docker-ce/master/components/cli/contrib/completion/bash/docker

		if [[ "$init" == "upstart" ]]; then
			# Update the upstart file
			curl -sSL -o /etc/init/docker.conf https://raw.githubusercontent.com/docker/docker/master/contrib/init/upstart/docker.conf
		fi

		# move vim syntax highlighting
		if [[ ! -d "${user_home}/.vim/bundle/Dockerfile" ]]; then
			mkdir -p "${user_home}/.vim/bundle/Dockerfile"
		fi
		# shellcheck disable=SC2216
		yes | cp -r contrib/syntax/vim/* "${user_home}/.vim/bundle/Dockerfile/"
		chown -R "${TARGET_USER}" "${user_home}/.vim/bundle/Dockerfile"
		)
	fi

	# get the binary
	local tmp_tar=/tmp/docker.tgz
	local binary_uri="https://download.docker.com/linux/static/edge/x86_64"
	local docker_version
	docker_version=$(curl -sSL "https://api.github.com/repos/docker/docker-ce/releases/latest" | jq --raw-output .tag_name)
	docker_version=${docker_version#v}
	# local docker_sha256
	# docker_sha256=$(curl -sSL "${binary_uri}/docker-${docker_version}.tgz.sha256" | awk '{print $1}')
	(
	set -x
	curl -fSL "${binary_uri}/docker-${docker_version}.tgz" -o "${tmp_tar}"
	# echo "${docker_sha256} ${tmp_tar}" | sha256sum -c -
	tar -C /usr/local/bin --strip-components 1 -xzvf "${tmp_tar}"
	rm "${tmp_tar}"
	docker -v
	)
	chmod +x /usr/local/bin/docker*

	# start docker
	if [[ "$init" == "upstart" ]]; then
		service docker start
	else
		systemctl start docker
	fi
}

update_linux() {
	apt -y update
	apt -y upgrade
	apt -y autoremove
	apt -y autoclean
	apt -y clean
	rm -rf /var/lib/apt/lists/*
}

update_kubectl() {
	KUBERNETES_VERSION=$(curl -sSL https://storage.googleapis.com/kubernetes-release/release/stable.txt)
	curl -sSL "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" > /usr/local/bin/kubectl
	chmod +x /usr/local/bin/kubectl
}

update() {
	echo "htotheizzo is running the update functions"

	# detect the OS for the update functions
	if [[ "$OSTYPE" == "linux-gnu" ]]; then
		echo "Hey there Linux user. You rule."

		# on linux, make sure they are the super user
		if [ "$UID" -ne 0 ]; then
			echo "Please run as root"
			exit 1
		fi

		# update
		get_user;
		update_linux;
		update_docker;
		update_kubectl;
	else
		echo "We don't have update functions for OS: ${OSTYPE}"
		echo "Moving on..."
	fi

	echo "htotheizzo is complete, you got 99 problems but updates ain't one"
}

main() {
	local arg=$1
	if [[ ! -z "$arg" ]]; then
		help
	else
		update
	fi
}

main "$@"
