#!/bin/bash
set -e

help() {
	echo "htotheizzo - a simple script that makes updating/upgrading homebrew or apt-get, gems, pip packages, and node packages so much easier"
}

dcleanup(){
	local containers
	containers=( $(docker ps --filter status=exited -q 2>/dev/null) )
	docker rm "${containers[@]}" 2>/dev/null
	local images
	images=( $(docker images --filter dangling=true -q 2>/dev/null) )
	docker rmi "${images[@]}" 2>/dev/null
}

update_docker() {
	local username
	username=$(find /home/* -maxdepth 0 -printf "%f" -type d)
	local user_home="/home/${username}"
	local docker_dir="${user_home}/docker"

	# set init
	local init="systemd"
	if [[ "$(/sbin/init --version)" =~ "upstart" ]]; then
		init="upstart"
	fi

	# stop docker
	dcleanup || true
	if [[ "$init" == "upstart" ]]; then
		service docker stop || true
	else
		systemctl stop docker || true
	fi

	if [[ -d "${docker_dir}" ]]; then
		(
		cd "${docker_dir}"

		# Clean up bundles
		rm -rf bundles

		# Include contributed completions
		mkdir -p /etc/bash_completion.d
		curl -sSL -o /etc/bash_completion.d/docker https://raw.githubusercontent.com/docker/docker/master/contrib/completion/bash/docker

		if [[ "$init" == "upstart" ]]; then
			# Update the upstart file
			curl -sSL -o /etc/init/docker.conf https://raw.githubusercontent.com/docker/docker/master/contrib/init/upstart/docker.conf
		fi

		# Include contributed man pages
		man/md2man-all.sh -q
		local manRoot="/usr/share/man"
		mkdir -p "$manRoot"
		for manDir in man/man?; do
			local manBase
			manBase="$(basename "$manDir")" # "man1"
			for manFile in "$manDir"/*; do
				local manName
				manName="$(basename "$manFile")" # "docker-build.1"
				mkdir -p "$manRoot/$manBase"
				gzip -c "$manFile" > "$manRoot/$manBase/$manName.gz"
			done
		done

		# move vim syntax highlighting
		if [[ ! -d "${user_home}/.vim/bundle/Dockerfile" ]]; then
			mkdir -p "${user_home}/.vim/bundle/Dockerfile"
		fi
		yes | cp -r contrib/syntax/vim/* "${user_home}/.vim/bundle/Dockerfile/"
		chown -R "${username}" "${user_home}/.vim/bundle/Dockerfile"
		)
	fi

	# get the binary
	local tmp_tar=/tmp/docker.tgz
	local binary_uri="https://master.dockerproject.org"
	local docker_version
	docker_version=$(curl -sSL "${binary_uri}/version")
	local docker_sha256
	docker_sha256=$(curl -sSL "${binary_uri}/linux/amd64/docker-${docker_version}.tgz.sha256" | awk '{print $1}')
	(
	set -x
	curl -fSL "${binary_uri}/linux/amd64/docker-${docker_version}.tgz" -o "${tmp_tar}"
	echo "${docker_sha256} ${tmp_tar}" | sha256sum -c -
	tar -C /usr/local/bin --strip-components 1 -xzvf "${tmp_tar}"
	rm "${tmp_tar}"
	docker -v
	)
	chmod +x /usr/local/bin/docker*

	# start docker
	if [[ "$init" == "upstart" ]]; then
		service docker start
	else
		systemctl start docker
	fi
}

update_linux() {
	apt-get -y update
	apt-get -y upgrade
	apt-get -y autoremove
	apt-get -y autoclean
	apt-get -y clean
	rm -rf /var/lib/apt/lists/*
}

update() {
	echo "htotheizzo is running the update functions"

	# detect the OS for the update functions
	if [[ "$OSTYPE" == "linux-gnu" ]]; then
		echo "Hey there Linux user. You rule."

		# on linux, make sure they are the super user
		if [ "$UID" -ne 0 ]; then
			echo "Please run as root"
			exit 1
		fi

		# update
		update_linux;
		update_docker;
	else
		echo "We don't have update functions for OS: ${OSTYPE}"
		echo "Moving on..."
	fi

	echo "htotheizzo is complete, you got 99 problems but updates ain't one"
}

main() {
	local arg=$1
	if [[ ! -z "$arg" ]]; then
		help
	else
		update
	fi
}

main "$@"
